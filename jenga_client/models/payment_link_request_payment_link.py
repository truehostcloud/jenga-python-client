# coding: utf-8

"""
    Jenga API

    API for Jenga payment processing and transaction management

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PaymentLinkRequestPaymentLink(BaseModel):
    """
    PaymentLinkRequestPaymentLink
    """ # noqa: E501
    expiry_date: date = Field(description="Link Expiry date (yyyy-MM-dd)", alias="expiryDate")
    sale_date: date = Field(description="Date service or product offered (yyyy-MM-dd)", alias="saleDate")
    sale_type: StrictStr = Field(description="Type of sale", alias="saleType")
    payment_link_type: StrictStr = Field(description="Type of payment link", alias="paymentLinkType")
    name: StrictStr = Field(description="Name of product or Service")
    description: StrictStr = Field(description="Description of service or product")
    external_ref: StrictStr = Field(description="Third Party reference", alias="externalRef")
    payment_link_ref: Optional[StrictStr] = Field(default=None, description="Link reference for updating link details", alias="paymentLinkRef")
    redirect_url: Optional[StrictStr] = Field(default=None, description="Website URL to redirect to on successful payment", alias="redirectURL")
    amount_option: StrictStr = Field(description="Allow change amount or not", alias="amountOption")
    amount: Union[StrictFloat, StrictInt] = Field(description="Payment Link amount")
    currency: StrictStr = Field(description="Payment currency")
    __properties: ClassVar[List[str]] = ["expiryDate", "saleDate", "saleType", "paymentLinkType", "name", "description", "externalRef", "paymentLinkRef", "redirectURL", "amountOption", "amount", "currency"]

    @field_validator('sale_type')
    def sale_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['SERVICE', 'PRODUCT']):
            raise ValueError("must be one of enum values ('SERVICE', 'PRODUCT')")
        return value

    @field_validator('payment_link_type')
    def payment_link_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['SINGLE', 'BULK']):
            raise ValueError("must be one of enum values ('SINGLE', 'BULK')")
        return value

    @field_validator('amount_option')
    def amount_option_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['OPEN', 'RESTRICTED']):
            raise ValueError("must be one of enum values ('OPEN', 'RESTRICTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentLinkRequestPaymentLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentLinkRequestPaymentLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "expiryDate": obj.get("expiryDate"),
            "saleDate": obj.get("saleDate"),
            "saleType": obj.get("saleType"),
            "paymentLinkType": obj.get("paymentLinkType"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "externalRef": obj.get("externalRef"),
            "paymentLinkRef": obj.get("paymentLinkRef"),
            "redirectURL": obj.get("redirectURL"),
            "amountOption": obj.get("amountOption"),
            "amount": obj.get("amount"),
            "currency": obj.get("currency")
        })
        return _obj


