# coding: utf-8

"""
    Jenga API

    API for Jenga payment processing and transaction management

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class EquitelPushRequestPayment(BaseModel):
    """
    EquitelPushRequestPayment
    """ # noqa: E501
    ref: StrictStr = Field(description="Payment Reference (6-12 alphanumeric characters)")
    mobile_number: StrictStr = Field(description="Payer's mobile number with country code prefix", alias="mobileNumber")
    telco: StrictStr = Field(description="Payer's telco")
    amount: StrictStr = Field(description="Transaction amount (up to 2 decimal places)")
    var_date: date = Field(description="Transaction date in YYYY-MM-DD format", alias="date")
    call_back_url: StrictStr = Field(description="Callback URL for transaction status notifications", alias="callBackUrl")
    push_type: StrictStr = Field(description="Type of push notification", alias="pushType")
    __properties: ClassVar[List[str]] = ["ref", "mobileNumber", "telco", "amount", "date", "callBackUrl", "pushType"]

    @field_validator('push_type')
    def push_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['STK', 'USSD']):
            raise ValueError("must be one of enum values ('STK', 'USSD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EquitelPushRequestPayment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EquitelPushRequestPayment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ref": obj.get("ref"),
            "mobileNumber": obj.get("mobileNumber"),
            "telco": obj.get("telco"),
            "amount": obj.get("amount"),
            "date": obj.get("date"),
            "callBackUrl": obj.get("callBackUrl"),
            "pushType": obj.get("pushType")
        })
        return _obj


