# coding: utf-8

"""
    Jenga API

    API for Jenga payment processing and transaction management

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from jenga_client.models.m_pesa_callback_response_bank import MPesaCallbackResponseBank
from jenga_client.models.m_pesa_callback_response_customer import MPesaCallbackResponseCustomer
from jenga_client.models.m_pesa_callback_response_transaction import MPesaCallbackResponseTransaction
from typing import Optional, Set
from typing_extensions import Self

class MPesaCallbackResponse(BaseModel):
    """
    MPesaCallbackResponse
    """ # noqa: E501
    callback_type: Optional[StrictStr] = Field(default=None, description="Type of callback", alias="callbackType")
    customer: Optional[MPesaCallbackResponseCustomer] = None
    transaction: Optional[MPesaCallbackResponseTransaction] = None
    bank: Optional[MPesaCallbackResponseBank] = None
    __properties: ClassVar[List[str]] = ["callbackType", "customer", "transaction", "bank"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MPesaCallbackResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transaction
        if self.transaction:
            _dict['transaction'] = self.transaction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bank
        if self.bank:
            _dict['bank'] = self.bank.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MPesaCallbackResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "callbackType": obj.get("callbackType"),
            "customer": MPesaCallbackResponseCustomer.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "transaction": MPesaCallbackResponseTransaction.from_dict(obj["transaction"]) if obj.get("transaction") is not None else None,
            "bank": MPesaCallbackResponseBank.from_dict(obj["bank"]) if obj.get("bank") is not None else None
        })
        return _obj


